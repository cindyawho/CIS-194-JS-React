Notes based on video linked below
<a href="https://www.youtube.com/watch?v=u72H_zZzkcw">Video Link</a>

Intro 
detailed, longer video, watch the bits and pieces that you need. 

Types of Web Developers 
Front-End Developer, Back-End Developer, Full Stack-Developer
front: user interface made by html, css, js, etc. 
back: programming languages, functionality, databases, Creating APIs, deploying to servers
full-stack: does both but can focus a bit more

The Essentials
Basic tools: 
* computer and OS (at least 8GB of RAM)
* operating system (mac, windows, linux)
* text editor/IDE (VS Code, Sublime Text, VIM, Atom)
* Web Browser (chrome, firefox, edge, safari, brave)
* terminal (default, iTerm, GitBash, Powershell, WSL, Hyper)

HTML & CSS
* HTML Layout, Tags Attributes
* Semantic Elements !! Learn these because it is more accessible for screenreaders and is more organized
* IDs vs Classes (ids for unique elements, classes for styling)
* CSS Fundamentals 
* CSS Specificity (when selectors overwrite each other)
* Flexbox & CSS Grid
* Responsive Layouts

JavaScript
* Learn the basics
* Browser Environment (window object, execution context)
* Document Object Model 
* ES6+ Features
* Array Methods
* Asynch JS & HTTP

Layout and Styling tools
* SASS - elegant variables, nesting, functions, etc. 
* Post CSS - uses JS plugins, usually used with Webpack

CSS Frameworks
* these save time when creating or styling layouts
* Tailwind (low-level utility framework)
* Bootstrap
* Materialize
* Bulma

Design Software
* Good to know at least the basics of the design software and how to create a basic layout
* Adobe XD
* Figma (recommended for beginners)
* Sketch (mac only)
* Invision (great for prototyping)

Tools and Utilities
* Git and Github (version control)
* Broswer Developer Tools (elements, console, app, network tabs)
* NPM (Node packager manager)
* Markdown (lightweight markup language, used in many areas)
* Editor / IDE Extensions (Emmet Prettier, ES Lint)
* HTTP Clients (Axioms, Postman, CURL)

Front End Deployment
* Domain Names
* Hosting
* Options: Netlify, Vercel, Github Pages, CPanel

Foundational Front-End Developer
* Set up basic dev Environment
* Create layouts with HTML/CSS
* Understand simple design principles
* Javascript and the DOM
* Fetch and HTTP (methods and status codes)
* Version control (git and github)
* Basic Deployment

Your Next Path
* Web Design (FE HTML/CSS)
* Server-Side/Back-End (BE or FS)
* Front-End Framework and Tooling (FE or FS)
* Sharpen your javascript (FE, BE, FS)

Front-End Frameworks
* help you easily create modern websites and interfaces in organized way
* interfaces are created using components
* state is very common in these
* server rended content
* Options: React, VUE, Angular

React
* backed by meta
* popular
* great resources and communities
* we might want to use following pieces of ecosystem: create react app, react router, jsx, context api, redux, hooks, xstate, nextjs, gatsby

VUE
* not backed by large company
* easy learning curve
* gaining popularity

Angular 
* backed by google
* steep learning curve
* good for complex projects

Svelte
* compiles into JavaScript
* very fast, easy

SolidJS
* reactive UI library
* similar to React

Typescript
* like js, dynamic types of variables
* 

UI Kits and Component libraries
* libraries with pre-defined styled components that you can use in your UI
* React
* VUE (Vuetify)
* Angular
* Svelte

Testing
* unit testing (individual units)
* integration testing
* end to end testing
* performance testing
* Helper options: Jest for JS, Robot for Python, MSTest for C#, Native for react

Web APIs
* Canvas APIs (Dynamic graphics and visualization - good for games)
* GeoLocation (get a user's location)
* Speech API (speech recognition)
* Audio and video API
* Web RTC (real time communication with audio/video)
* Local Storage (store data in browser)

Full-Stack Frameworks
* become very popular to render some things on the client and some on the server 
* benefits to servers
* Options: 
* * NextJS uses react, file based routing, api routes, data fetching
* * Remix user react, native form component, loading states

Static Site Generators
* used to make fast and optimized websites

Front-End Superstar
* know front-end framework well (understand components and state)
* HTTP/APIs (comfortable fetching and sending from and to APIs)
* Full stack / SSR framework is becoming a necessity
* Optional: TypeScript, JamStack tech, Testing

Server-Side Languages
* 

Server-side Frameworks 
* 